// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence_Layer.Data;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200816221912_inital_db_1")]
    partial class inital_db_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Persistence_Layer.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo");

                    b.Property<int>("AccountTypeId");

                    b.Property<string>("Address1")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasMaxLength(255);

                    b.Property<decimal>("Balance");

                    b.Property<int>("ClientId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(55);

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("Phone")
                        .HasMaxLength(12);

                    b.Property<int>("RelationshipId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortId");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Persistence_Layer.Models.AccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo");

                    b.Property<int>("AccountTypeId");

                    b.Property<string>("Address1")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasMaxLength(255);

                    b.Property<decimal>("Balance");

                    b.Property<int>("ClientId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(55);

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("Phone")
                        .HasMaxLength(12);

                    b.Property<int>("RelationshipId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("SortId");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("AccountHistories");
                });

            modelBuilder.Entity("Persistence_Layer.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("Persistence_Layer.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasMaxLength(255);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address1 = "Address 1",
                            Address2 = "Address 2",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Name = "Business Name",
                            State = "zz",
                            ZipCode = "zzzzz"
                        });
                });

            modelBuilder.Entity("Persistence_Layer.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Persistence_Layer.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortId");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Description = "New Group",
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            SortId = 0
                        });
                });

            modelBuilder.Entity("Persistence_Layer.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IconName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Link");

                    b.Property<int>("MainMenuId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UserRoles");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "home",
                            MainMenuId = 0,
                            SortId = 1,
                            Title = "Home",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "account",
                            MainMenuId = 0,
                            SortId = 2,
                            Title = "Account",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "transaction",
                            MainMenuId = 0,
                            SortId = 3,
                            Title = "Transaction",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "report",
                            MainMenuId = 0,
                            SortId = 4,
                            Title = "Reports",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "code",
                            MainMenuId = 0,
                            SortId = 5,
                            Title = "Code System",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "setting",
                            MainMenuId = 0,
                            SortId = 6,
                            Title = "Setting",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "tool",
                            MainMenuId = 0,
                            SortId = 7,
                            Title = "Tools",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "menu",
                            MainMenuId = 5,
                            SortId = 1,
                            Title = "Menu",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "role",
                            MainMenuId = 6,
                            SortId = 1,
                            Title = "Role",
                            UserRoles = "1,2,3"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Link = "user",
                            MainMenuId = 6,
                            SortId = 2,
                            Title = "User",
                            UserRoles = "1,2,3"
                        });
                });

            modelBuilder.Entity("Persistence_Layer.Models.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Persistence_Layer.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 926, DateTimeKind.Local).AddTicks(5922),
                            Description = "Admin",
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Description = "User",
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056),
                            Description = "Viewer",
                            IsActive = true,
                            IsVisible = true,
                            LastModifiedBy = 0,
                            LastModifiedDate = new DateTime(2020, 8, 16, 18, 19, 11, 933, DateTimeKind.Local).AddTicks(1056)
                        });
                });

            modelBuilder.Entity("Persistence_Layer.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description1")
                        .HasMaxLength(255);

                    b.Property<string>("Description2")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Persistence_Layer.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("Persistence_Layer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<DateTime>("LastPasswordChangedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PasswordChangedCount");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Persistence_Layer.Models.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName");

                    b.Property<string>("Comment");

                    b.Property<string>("ControllerName");

                    b.Property<DateTime>("DateRequested");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("Persistence_Layer.Models.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<DateTime>("LastPasswordChangedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PasswordChangedCount");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("UserRole");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("UserHistories");
                });

            modelBuilder.Entity("Persistence_Layer.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Persistence_Layer.Models.Account", b =>
                {
                    b.HasOne("Persistence_Layer.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Persistence_Layer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Persistence_Layer.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Persistence_Layer.Models.AccountType", b =>
                {
                    b.HasOne("Persistence_Layer.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Persistence_Layer.Models.Client", b =>
                {
                    b.HasOne("Persistence_Layer.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Persistence_Layer.Models.Transaction", b =>
                {
                    b.HasOne("Persistence_Layer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Persistence_Layer.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Persistence_Layer.Models.TransactionType", b =>
                {
                    b.HasOne("Persistence_Layer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Persistence_Layer.Models.UserRole", b =>
                {
                    b.HasOne("Persistence_Layer.Models.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Persistence_Layer.Models.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
